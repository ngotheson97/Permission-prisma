scalar DateTime

type Query {
  me: User
  feed: [Post!]!
  filterPosts(searchString: String): [Post!]!
  post(id: ID!): Post
  getclass: [Class!]!
  unit: [Unit!]!
  lesson: [Lesson!]!
}

type Mutation {
  createDraft(title: String!, content: String): Post!
  createUnit(unit: String!, id_lesson: ID!): Unit!
  createLesson(title: String!): Lesson!
  createClass(name: String!, id_unit: ID!): Class!
  deletePost(id: ID!): Post
  publish(id: ID!): Post
  setPermission( permission: Role!): Permission
  signup(email: String!, password: String!, name: String, role: Role): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

type Permission {
  permission: Role!
  token: String!
}


type Post {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  title: String!
  content: String
}

type User {
  id: ID!
  email: String!
  name: String
  posts: [Post!]!
  role: Role!
}

enum Role {
  ADMIN
  CUSTOMER
}

type Unit {
    id: ID!
    unit: String!
    lessons: [Lesson!]!
}

type Lesson {
  id: ID!
  title: String!
}

type Class {
  id: ID!
  name: String!
  units: [Unit!]!
}